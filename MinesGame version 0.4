import time
import telebot
import sqlite3
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import datetime

cliend = telebot.TeleBot('1978676251:AAECObJgAg3M48F0EeCMdA3Xlxde-m7GXHc')

conn = sqlite3.connect('C:\\Users\\Home\\Desktop\\database\\database.db', check_same_thread=False)
cursor = conn.cursor()

info = {
    "game":"",
    "user_subtract_balance":0,
    "user_add_balance": 0,
    "user_id":0,
    "chat_id":0,

    "call_apple": None,
    "call_bones": None,
    "call_nvuti": None,
    "call_point": None,
    "call_miner":None,

    "count_call":0,

    "cef_apple":2,
    "apple_for":5,
    "apple":"",

    "nvuti_1":0,
    "nvuti_2":0,

    "miner_call_data": "",

    "index_apple": 1,
    "index_bones": 1,
    "index_nvuti": 1,
    "index_point": 1,
    "index_miner": 1,
}
apple_mas = [[],[],[],[],[],[]]

num = ["00", "01", "02", "03", "04", "10", "11", "12", "13", "14", "20", "21", "22", "23", "24", "30", "31", "32","33", '34', '40', "41", "42", "43", "44"]
nul = [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
game = [[" ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " "],
        [" ", " ", " ", " ", " "]]

bl = {"coin":20}

def db_table_val(user_id: int, user_name: str, user_surname: str, username: str, balance: int):
	cursor.execute('INSERT INTO tg_bot (user_id, user_name, user_surname, username, balance) VALUES (?, ?, ?, ?,?)', (user_id, user_name, user_surname, username, balance,))
	conn.commit()

@cliend.message_handler(commands=['start'])
def inline(message):
    rmk = types.ReplyKeyboardMarkup(resize_keyboard=True)
    rmk.add(types.KeyboardButton('🍏 Apple'),types.KeyboardButton('💣 Mines'),types.KeyboardButton('💠 Nvuti game')).add(types.KeyboardButton("🚀 Bonus")).add(types.KeyboardButton('💰 Balance'))
    id_tg_user = message.from_user.id

    # SQL check
    #
    cursor.execute(""f"SELECT user_id from tg_bot WHERE user_id = {id_tg_user}""")
    user = cursor.fetchall()

    if len(user) == 1:
        msg = cliend.send_message(message.chat.id, "С возвращением " + str(message.from_user.first_name), reply_markup=rmk)

    else:
        us_id = message.from_user.id
        us_name = message.from_user.first_name
        us_sname = message.from_user.last_name
        username = message.from_user.username
        balance = bl["coin"]

        db_table_val(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username, balance=balance)

        msg = cliend.send_message(message.chat.id, 'Добро пожаловать в CandyWorld', reply_markup=rmk)

    #
    #

    cliend.register_next_step_handler(msg, main)


@cliend.message_handler(content_types = ['text'])
def main(message):
    command = message.text
    info["call_apple"] = None
    info["call_bones"] = None
    info["call_nvuti"] = None
    info["call_point"] = None
    info["call_miner"] = None

    info["user_id"] = message.from_user.id
    info["chat_id"] = message.chat.id

    info["count_call"] = 0

    info['index_apple'] += 1
    info['index_bones'] += 1
    info['index_nvuti'] += 1
    info["index_point"] += 1

    if command == "🍏 Apple":
        info["game"] = message.text
        bet(message)
    elif command == "💠 Nvuti game":
        info["game"] = message.text
        bet(message)
    elif command == "💣 Mines":
        info["game"] = message.text
        bet(message)
    elif command == "🚀 Bonus":
        get_bonus(message)
    elif command == "💰 Balance":
        balance(message)
    elif command == "/start":
        inline(message)
    else:
        cliend.send_message(message.chat.id,"📛  Вы ввели недоступную команду")

##                          BET
##

def bet(message):
    msg = cliend.send_message(message.chat.id, "Сделайте ставку, минимальная ставка составляет 2 руб.")

    info["user_add_balance"] = 0

    cliend.register_next_step_handler(msg, check)

def check(message):
    bet_user = message.text
    balance_sql = get_balanceSQL_user()

    bet_user = bet_user.replace(',', '.', 1)
    if balance_sql >= 2 and len(bet_user.split()) == 1 and (bet_user.isdigit() == True or bet_user.count('.') == 1):
        if float(bet_user) >= 2:
            info["user_subtract_balance"] = float(bet_user)
            last_check(message)
        elif float(bet_user) < 2:
            cliend.send_message(message.chat.id, "Ставка меньше 2 руб.")
            return bet(message)
        else:
            cliend.send_message(message.chat.id, "Данная ставка недопустима.")
            return bet(message)

    elif balance_sql < 2:
        cliend.send_message(message.chat.id, "Ваш баланс меньше 2 руб.")

    else:
        if message.text == "🍏 Apple":
            info["game"] = message.text
            bet(message)
        elif message.text == "💠 Nvuti game":
            info["game"] = message.text
            bet(message)
        elif info["game"] == "💣 Mines":
            info["game"] = message.text
            bet(message)
        elif message.text == "🚀 Bonus":
            get_bonus(message)
        elif message.text == "💰 Balance":
            balance(message)
        else:
            cliend.send_message(message.chat.id, "Данная ставка недопустима.")
            return bet(message)

def last_check(message):

    if info["game"] == "🍏 Apple":
        apple()
    elif info["game"] == "💠 Nvuti game":
        nvuti(message)
    elif info["game"] == "💣 Mines":
        miner(message)
    elif message.text == "🚀 Bonus":
        get_bonus(message)
    else:
        cliend.send_message(message.chat.id, "Ваш баланс меньше 2 руб.")
##
##


#                                   GAME
#
"""     -------------------------    NEW RELEASE   --------------------------------------"""

def miner(message):
    info["call_miner"] = True
    info["index_miner"] += 1

    subtract_balanceSQL()

    if len(num) == 0:
        for i in range(5):
            del game[0]
            del nul[0]

            game.append([" ", " ", " ", " ", " "])
            nul.append([" ", " ", " ", " ", " "])
            num.append(f"{i}0")
            num.append(f"{i}1")
            num.append(f"{i}2")
            num.append(f"{i}3")
            num.append(f"{i}4")

    cliend.send_message(int(info["chat_id"]), "Не попадитесь на мину! 💣",reply_markup=miner_Markup())

def miner_random():
    bombs = []
    win = []

    for a in range(8):
        random_number_win = random.choice(num)
        win.append(random_number_win)
        del num[num.index(random_number_win)]

        random_number_bombs = random.choice(num)
        bombs.append(random_number_bombs)
        del num[num.index(random_number_bombs)]

    for i in range(9):
        game[int(num[0][0])][int(num[0][1])] = "·"
        del num[0]

    for b in range(8):
        game[int(bombs[0][0])][int(bombs[0][1])] = "💣"
        game[int(win[0][0])][int(win[0][1])] = random.choice(["x1.5", 'x2'])
        del win[0]
        del bombs[0]

    print(game)


def miner_Markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 5

    miner_random()

    for i in range(5):
        markup.add(InlineKeyboardButton(f" ",callback_data=f"{i}0{info['index_miner']}"),
                   InlineKeyboardButton(f" ",callback_data=f"{i}1{info['index_miner']}"),
                   InlineKeyboardButton(f" ",callback_data=f"{i}2{info['index_miner']}"),
                   InlineKeyboardButton(f" ",callback_data=f"{i}3{info['index_miner']}"),
                   InlineKeyboardButton(f" ",callback_data=f"{i}4{info['index_miner']}"))

    markup.add(InlineKeyboardButton("Забрать деньги",callback_data=f"TakeMoneyMiner{info['index_miner']}"))
    return markup

def miner_replace(call,c):
    markup = InlineKeyboardMarkup()
    markup.row_width = 5

    nul[int(c[0])][int(c[1])] = game[int(c[0])][int(c[1])]

    for i in range(5):
        markup.add(InlineKeyboardButton(f"{nul[i][0]}",callback_data=f"{i}0{info['index_miner']}"),
                   InlineKeyboardButton(f"{nul[i][1]}",callback_data=f"{i}1{info['index_miner']}"),
                   InlineKeyboardButton(f"{nul[i][2]}",callback_data=f"{i}2{info['index_miner']}"),
                   InlineKeyboardButton(f"{nul[i][3]}",callback_data=f"{i}3{info['index_miner']}"),
                   InlineKeyboardButton(f"{nul[i][4]}",callback_data=f"{i}4{info['index_miner']}"))

    markup.add(InlineKeyboardButton("Забрать деньги", callback_data=f"TakeMoneyMiner{info['index_miner']}"))
    cliend.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                             text="Не попадитесь на мину! 💣",
                             reply_markup=markup)


@cliend.callback_query_handler(func=lambda call: info["call_miner"])
def MainMiner(call):
    if call.data == f"TakeMoneyMiner{info['index_miner']}":
        info["call_miner"] = False
        add_balanceSQL()
        cliend.answer_callback_query(call.id, "✅  Вы забрали свои деньги")

    elif int(call.data[2:]) == info["index_miner"]:
        c = call.data[:2]
        icon = game[int(c[0])][int(c[1])]

        miner_replace(call, c)

        if icon == "💣":
            info["user_add_balance"] = 0
            info["call_miner"] = False
        elif icon == "x1.5" or icon == "x2":
            info["user_add_balance"] += info["user_subtract_balance"] * float(icon[1:])
            print(info["user_add_balance"])

"""     -------------------------         END         -------------------------------------"""




"""     -------------------------   beta version   --------------------------------------"""
def points(message):
    info["call_point"] = True
    cliend.send_message(int(info["chat_id"]), "",reply_markup=points_Markup())

def points_Markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 3
    markup.add(InlineKeyboardButton("None", callback_data=f'None{info["index_point"]}'))

    return markup



def ttt(message):
    # 🍋     - лимон
    # 🍉     - арбуз
    # 🥥     - кокос
    # 🍄     - гриб
    # 🍇     - виноград
    # 🍒     - вишня
    # 🌶     - перец
    # 🥥    - кокос
    # ☄     - комета
    # 7
    # 💣     - бомбочка

    info["call_ttt"] = True
    cliend.send_message(int(info["chat_id"]), "777",reply_markup=tttMarkup())
def tttMarkup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 3


    for i in range(3):
        markup.add(InlineKeyboardButton(f"t1{i}{info['GetIndexTopor']}",callback_data=f"t1{i}"),
                   InlineKeyboardButton(f"t2{i}{info['GetIndexTopor']}",callback_data=f"t2{i}"),
                   InlineKeyboardButton(f"t3{i}{info['GetIndexTopor']}",callback_data=f"t3{i}"))

    markup.add(InlineKeyboardButton("Крутить рулетку", callback_data=f'TwistTopor{info["index_topor"]}'))

    return markup

#@cliend.callback_query_handler(func=lambda call: info["call_ttt"])
def MainT(call):
    if call.data == f'TakeMoneyTopor{info["index_topor"]}':
        Updatet(call)

def Updatet(call):
    markup = InlineKeyboardMarkup()
    markup.row_width = 3

    for i in range(3):
        markup.add(InlineKeyboardButton(f"t1{i}{info['GetIndexTopor']}",callback_data=f"t1{i}"),
                   InlineKeyboardButton(f"t2{i}{info['GetIndexTopor']}",callback_data=f"t2{i}"),
                   InlineKeyboardButton(f"t3{i}{info['GetIndexTopor']}",callback_data=f"t3{i}"))

    info['GetIndexTopor'] += 1

    markup.add(InlineKeyboardButton("Крутить рулетку", callback_data=f'TwistTopor{info["index_topor"]}'))
    cliend.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                             text="777",
                             reply_markup=markup)
    time.sleep(0.15)
    return Updatet(call)



@cliend.message_handler(func=lambda message: True)
def bones(message):
    subtract_balanceSQL()

    info["call_bones"] = True
    info["user_add_balance"] = 0
    info["count_call"] = 0

    cliend.send_message(message.chat.id, "Выберите число", reply_markup=bones_gen_markup())

def bones_gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("1 - 6", callback_data=f"x{info['index_bones']}1"),
               InlineKeyboardButton("7 - 12", callback_data=f"x{info['index_bones']}2"))


    return markup

@cliend.callback_query_handler(func=lambda call: info["call_bones"] )
def bones_two(call):
    if (call.data  == f"x{info['index_bones']}1" or call.data  == f"x{info['index_bones']}2"):
        info["count_call"] += 1
        info["user_add_balance"] = int(info["user_subtract_balance"]) *  2

        r = random.randrange(1, 12)
        if r <= 6 and call.data  == f"x{info['index_bones']}1":
            cliend.answer_callback_query(call.id,f"🔼  Вы выиграли, выпало число: {r}")
            add_balanceSQL()

        elif r >= 7 and call.data  == f"x{info['index_bones']}2":
            cliend.answer_callback_query(call.id,f"🔼  Вы выиграли, выпало число: {r}")
            add_balanceSQL()

        else:
            cliend.answer_callback_query(call.id, f"🔽  Вы проиграли, выпало число: {r}")
            subtract_balanceSQL()

        return bones_gen_markup()

    elif get_balanceSQL_user() < 2:
        cliend.answer_callback_query(call.id,'Ваш балланс меньше 2руб.')


"""    ------------------------        END     --------------------------------------  """



def apple():
    info["call_apple"] =    True
    info["user_add_balance"] =     0
    info['apple_for'] =     5
    info["cef_apple"] =     1.5

    del apple_mas[0:]
    for i in range(6):
        apple_mas.append([])

    cliend.send_message(int(info["chat_id"]), "Выберите яблоко", reply_markup=apple_gen_marup())

def apple_gen_marup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 4

    cef = 4.0
    for i in range(6):
        if i == int(info["apple_for"]):
            markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                       InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}1"),
                       InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}2"),
                       InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}3"))

        else:
            markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                       InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}1"),
                       InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}2"),
                       InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}3"))
        cef -= 0.5

    markup.add(InlineKeyboardButton("Забрать деньги",callback_data=f"TakeMoneyApple{info['index_apple']}"))

    return markup

def back_apple(call,r):
    markup = InlineKeyboardMarkup()
    markup.row_width = 4
    cef = 4.0

    if r == 0:
        for i in range(6):
            if i == int(info["apple_for"]):
                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}3"))

            else:
                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}3"))
            cef -= 0.5

        markup.add(InlineKeyboardButton("Забрать деньги", callback_data=f"TakeMoneyApple{info['index_apple']}"))
        cliend.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 text="Выберите яблоко",
                                 reply_markup=markup)
def apple_los_markup(call,r):
    markup = InlineKeyboardMarkup()
    markup.row_width = 4
    cef = 4.0
    if r == 0:
        info["call_apple"] =    None

        for i in range(6):
            if i == 5 - int(info["count_call"]):
                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}3"))


            elif int(info["apple_for"]) >= i:

                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}3"))

            elif int(info["apple_for"]) < i:

                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f" {apple_mas[i][0][0]} ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f" {apple_mas[i][0][1]} ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f" {apple_mas[i][0][2]} ", callback_data=f"a{i}{info['index_apple']}3"))
            cef -= 0.5

        markup.add(InlineKeyboardButton("Забрать деньги", callback_data=f"TakeMoneyApple{info['index_apple']}"))
        cliend.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text="Выберите яблоко",
                                     reply_markup=markup)
        info["user_add_balance"] = 0
        info['apple_for'] = 5
        info["cef_apple"] = 1.5

        while len(apple_mas) != 0:
            del apple_mas[0]
        for i in range(6):
            apple_mas.append([])

        time.sleep(1)


        info["call_apple"] = True
        back_apple(call,r)

    elif r == 1 or r == 2 or r == 3:
        if r == 1:
            apple_mas[info["apple_for"]].append("🍏🍎🍎")
        elif r == 2:
            apple_mas[info["apple_for"]].append("🍎🍏🍎")
        elif r == 3:
            apple_mas[info["apple_for"]].append("🍎🍎🍏")


        info["apple_for"] -= 1

        for i in range(6):

            if i == int(info["apple_for"]):
                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f" 🍏 ", callback_data=f"a{i}{info['index_apple']}3"))

            elif int(info["apple_for"]) > i:
                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f"   ", callback_data=f"a{i}{info['index_apple']}3"))


            # apple button red and green
            #
            elif int(info["apple_for"]) < i:
                markup.add(InlineKeyboardButton(f"x {cef}", callback_data=f"cef{i}"),
                           InlineKeyboardButton(f" {apple_mas[i][0][0]} ", callback_data=f"a{i}{info['index_apple']}1"),
                           InlineKeyboardButton(f" {apple_mas[i][0][1]} ", callback_data=f"a{i}{info['index_apple']}2"),
                           InlineKeyboardButton(f" {apple_mas[i][0][2]} ", callback_data=f"a{i}{info['index_apple']}3"))

            cef -= 0.5

        markup.add(InlineKeyboardButton("Забрать деньги", callback_data=f"TakeMoneyApple{info['index_apple']}"))
        cliend.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Выберите яблоко",
                                 reply_markup=markup)



@cliend.callback_query_handler(func=lambda call: info["call_apple"])   # 🍎 - красное яблоко; 🍏 - зеленое яблоко;
def apple_two(call):
    info["count_call"] += 1
    if (call.data == f"a{info['apple_for']}{info['index_apple']}1" or call.data == f"a{info['apple_for']}{info['index_apple']}2" or call.data == f"a{info['apple_for']}{info['index_apple']}3") and (get_balanceSQL_user() >= 2 or info["count_call"] == 1 or info["user_add_balance"] != 0):

        r = random.randrange(1, 4)
        apple_los_markup(call,r)

        if call.data == f"a{info['apple_for'] + 1}{info['index_apple']}1" and r == 1:
            if info["count_call"] == 1:
                subtract_balanceSQL()
            info["user_add_balance"] += float(info["user_subtract_balance"]) * info["cef_apple"]
            info["cef_apple"] += 0.5
        elif call.data == f"a{info['apple_for'] + 1}{info['index_apple']}2" and r == 2:
            if info["count_call"] == 1:
                subtract_balanceSQL()
            info["user_add_balance"] += float(info["user_subtract_balance"])  * info["cef_apple"]
            info["cef_apple"] += 0.5
        elif call.data == f"a{info['apple_for'] + 1}{info['index_apple']}3" and r == 3:
            if info["count_call"] == 1:
                subtract_balanceSQL()
            info["user_add_balance"] += float(info["user_subtract_balance"])  * info["cef_apple"]
            info["cef_apple"] += 0.5
        else:
            r = 0
            apple_los_markup(call, r)
            if info["count_call"] == 1:
                subtract_balanceSQL()


    elif get_balanceSQL_user() < 2 and info["user_add_balance"] == 0:
            cliend.answer_callback_query(call.id,'Ваш балланс меньше 2руб.')

    else:
        if call.data == f"TakeMoneyApple{info['index_apple']}":

            info["call_apple"] = None

            cliend.answer_callback_query(call.id, "✅  Вы забрали свои деньги")
            add_balanceSQL()


@cliend.message_handler(func=lambda message: True)
def nvuti(message):
    info["call_nvuti"] = True
    info["user_add_balance"] = 0
    info["count_call"] = 0

    info["user_add_balance"] = float(info["user_subtract_balance"]) * 2
    cliend.send_message(message.chat.id, "Каким будет следующее число", reply_markup=nvuti_gen_markup())

def nvuti_gen_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 2

    r = random.randrange(0, 10000)
    info["nvuti_1"] = r

    markup.add(InlineKeyboardButton(f"{r}", callback_data="nv"))

    markup.add(InlineKeyboardButton(f"Больше", callback_data=f"n{info['index_nvuti']}1"),
               InlineKeyboardButton("Меньше", callback_data=f"n{info['index_nvuti']}2"))

    return markup

@cliend.callback_query_handler(func=lambda call: info["call_nvuti"] )
def nvuti_call(call):
    r = random.randrange(0, 10000)
    info["nvuti_2"] = r

    if call.data == f"n{info['index_nvuti']}1" or call.data == f"n{info['index_nvuti']}2":
        nvuti_replace(call)
        if call.data == f"n{info['index_nvuti']}1" and info["nvuti_2"] >= info["nvuti_1"]:
            cliend.answer_callback_query(call.id, f"🔼  Вы выиграли")
            add_balanceSQL()

        elif call.data == f"n{info['index_nvuti']}2" and info["nvuti_2"] <= info["nvuti_1"]:
            cliend.answer_callback_query(call.id, f"🔼  Вы выиграли")
            add_balanceSQL()
        else:
            cliend.answer_callback_query(call.id, f"🔽  Вы проиграли")
            subtract_balanceSQL()

    elif get_balanceSQL_user() < 2:
        cliend.answer_callback_query(call.id,'Ваш балланс меньше 2руб.')

    info[f"nvuti_1"] = r

def nvuti_replace(call):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2

    markup.add(InlineKeyboardButton(f"{info['nvuti_2']}", callback_data="nv"))
    markup.add(InlineKeyboardButton(f"Больше", callback_data=f"n{info['index_nvuti']}1"), InlineKeyboardButton("Меньше", callback_data=f"n{info['index_nvuti']}2"))

    cliend.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="Каким будет следующее число",
                             reply_markup=markup)



#
#
def get_bonus(message):
    id_tg_user = int(info["user_id"])
    info["user_add_balance"] = 1

    cursor.execute(""f"SELECT bonus from tg_bot WHERE user_id = {id_tg_user}""")
    LaterBonusTime = cursor.fetchall()

    if CheckForTaking(LaterBonusTime[0][0]) == True:
        add_balanceSQL()
        cliend.send_message(message.chat.id,"✅ Получено 1 монета")

        UpdateDay = datetime.datetime.now().strftime(f"%d-%m-%Y %H:%M")
        cursor.execute(""f"Update tg_bot set bonus = (?) where user_id = {id_tg_user}""",(UpdateDay,))
        conn.commit()


    else:
        cliend.send_message(message.chat.id,"Бонус уже получен")

def CheckForTaking(bonus):
    if bonus == None or bonus == '':
        return True
    else:
        db, tb = bonus.split()[0], bonus.split()[1]
        current_datetime = str(datetime.datetime.now().strftime("%d-%m-%Y %H:%M"))

        d = list(map(int, current_datetime.split()[0].split('-')))
        t = list(map(int, current_datetime.split()[1].split(":")))

        db = list(map(int, db.split("-")))
        tb = list(map(int, tb.split(":")))

        today = datetime.datetime(d[2], d[1], d[0], t[0], t[1])
        bonus_date = datetime.datetime(db[2], db[1], db[0], tb[0], tb[1])
        delta = today - bonus_date

        if len(str(delta).split()) >= 3:
            return True
        else:
            return False

def balance(message):
    user_balalnce = get_balanceSQL_user()
    cliend.send_message(message.chat.id,"💰 Ваш балланс:  " + str(user_balalnce) + " coins" + "\n\nМинимальноая сумма для вывода: 50 монет\n💳 Вывод средств осуществляется на: QIWI")
#
#
def get_balanceSQL_user():
    id_tg_user = int(info["user_id"])

    cursor.execute(""f"SELECT balance from tg_bot WHERE user_id = {id_tg_user}""")
    User_balanceSQL = cursor.fetchall()

    return User_balanceSQL[0][0]

def subtract_balanceSQL():
    id_tg_user = int(info["user_id"])

    update_balance_user = get_balanceSQL_user() - round(float(info["user_subtract_balance"]),1)
    cursor.execute(""f"Update tg_bot set balance = {update_balance_user} where user_id = {id_tg_user}""")
    conn.commit()

    return update_balance_user

def add_balanceSQL():
    id_tg_user = int(info["user_id"])

    update_balance_user = get_balanceSQL_user() + round(float(info["user_add_balance"]), 1)
    cursor.execute(""f"Update tg_bot set balance = {update_balance_user} where user_id = {id_tg_user}""")
    conn.commit()

    return update_balance_user


cliend.polling(none_stop=True, interval= 0)
